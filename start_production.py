"""
Script de d√©marrage pour la production GMAO
Lance le backend et le frontend de mani√®re coordonn√©e
"""

import os
import sys
import subprocess
import threading
import time
import signal
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration
BACKEND_HOST = os.getenv('BACKEND_HOST', '0.0.0.0')
BACKEND_PORT = int(os.getenv('BACKEND_PORT', 8000))
FRONTEND_PORT = int(os.getenv('FRONTEND_PORT', 3000))

# Processus globaux
backend_process = None
frontend_process = None

def create_directories():
    """Cr√©er les r√©pertoires n√©cessaires"""
    directories = [
        'data',
        'data/uploads',
        'data/uploads/photos',
        'data/uploads/thumbs',
        'logs'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ R√©pertoires cr√©√©s")

def check_dependencies():
    """V√©rifier que toutes les d√©pendances sont install√©es"""
    try:
        import fastapi
        import uvicorn
        import sqlalchemy
        print("‚úÖ D√©pendances Python v√©rifi√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("Veuillez ex√©cuter: pip install -r requirements.txt")
        sys.exit(1)

def start_backend():
    """D√©marrer le serveur backend FastAPI"""
    global backend_process
    print(f"\nüöÄ D√©marrage du backend sur {BACKEND_HOST}:{BACKEND_PORT}...")
    
    cmd = [
        sys.executable,
        "-m", "uvicorn",
        "main:app",
        "--host", BACKEND_HOST,
        "--port", str(BACKEND_PORT)
    ]
    
    backend_process = subprocess.Popen(cmd, cwd="backend")

def start_frontend():
    """D√©marrer le serveur frontend"""
    global frontend_process
    print(f"\nüöÄ D√©marrage du frontend sur le port {FRONTEND_PORT}...")
    
    cmd = [sys.executable, "serve_frontend.py"]
    
    # D√©finir le port via variable d'environnement
    env = os.environ.copy()
    env['FRONTEND_PORT'] = str(FRONTEND_PORT)
    
    frontend_process = subprocess.Popen(cmd, env=env)

def signal_handler(signum, frame):
    """Gestionnaire pour arr√™t propre"""
    print("\n\n‚èπÔ∏è Arr√™t de l'application...")
    
    if backend_process:
        backend_process.terminate()
        backend_process.wait()
    
    if frontend_process:
        frontend_process.terminate()
        frontend_process.wait()
    
    print("‚úÖ Application arr√™t√©e proprement")
    sys.exit(0)

def main():
    print("="*60)
    print("üè≠ GMAO - D√©marrage en mode PRODUCTION")
    print("="*60)
    
    # Enregistrer le gestionnaire de signal
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Cr√©er les r√©pertoires n√©cessaires
    create_directories()
    
    # D√©finir le chemin absolu de la base de donn√©es et le passer √† l'environnement.
    # C'est la solution la plus robuste pour que le backend trouve la DB.
    db_file_path = Path('data/gmao.db').resolve()
    print(f"üîß Configuration de la base de donn√©es sur: {db_file_path}")
    os.environ['DATABASE_URL'] = f'sqlite:///{db_file_path}'
    
    # V√©rifier les d√©pendances
    check_dependencies()
    
    # D√©marrer les services
    backend_thread = threading.Thread(target=start_backend)
    backend_thread.start()
    
    # Attendre que le backend soit pr√™t
    time.sleep(3)
    
    frontend_thread = threading.Thread(target=start_frontend)
    frontend_thread.start()
    
    print("\n" + "="*60)
    print("‚úÖ GMAO Application d√©marr√©e!")
    print(f"üåê Backend API: http://localhost:{BACKEND_PORT}")
    print(f"üñ•Ô∏è Frontend: http://localhost:{FRONTEND_PORT}")
    print(f"üìö Documentation API: http://localhost:{BACKEND_PORT}/docs")
    print("\nAppuyez sur Ctrl+C pour arr√™ter l'application")
    print("="*60 + "\n")
    
    # Attendre les processus
    try:
        if backend_process:
            backend_process.wait()
        if frontend_process:
            frontend_process.wait()
    except KeyboardInterrupt:
        signal_handler(None, None)

if __name__ == "__main__":
    main() 